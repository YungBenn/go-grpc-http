// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: cars.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCar = `-- name: CreateCar :one
INSERT INTO cars (name, model, color, year, price, image, description, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, name, model, color, year, price, image, description, created_at, updated_at
`

type CreateCarParams struct {
	Name        string    `json:"name"`
	Model       string    `json:"model"`
	Color       string    `json:"color"`
	Year        string    `json:"year"`
	Price       string    `json:"price"`
	Image       string    `json:"image"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (Car, error) {
	row := q.db.QueryRow(ctx, createCar,
		arg.Name,
		arg.Model,
		arg.Color,
		arg.Year,
		arg.Price,
		arg.Image,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Car
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Model,
		&i.Color,
		&i.Year,
		&i.Price,
		&i.Image,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCar = `-- name: DeleteCar :exec
DELETE FROM cars 
WHERE id = $1
`

func (q *Queries) DeleteCar(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCar, id)
	return err
}

const getCar = `-- name: GetCar :one
SELECT id, name, model, color, year, price, image, description, created_at, updated_at FROM cars
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetCar(ctx context.Context, id uuid.UUID) (Car, error) {
	row := q.db.QueryRow(ctx, getCar, id)
	var i Car
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Model,
		&i.Color,
		&i.Year,
		&i.Price,
		&i.Image,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCars = `-- name: ListCars :many
SELECT id, name, model, color, year, price, image, description, created_at, updated_at FROM cars 
LIMIT $1
`

func (q *Queries) ListCars(ctx context.Context, limit int32) ([]Car, error) {
	rows, err := q.db.Query(ctx, listCars, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Car{}
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Model,
			&i.Color,
			&i.Year,
			&i.Price,
			&i.Image,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCar = `-- name: UpdateCar :one
UPDATE cars
SET name = $2, model = $3, color = $4, year = $5, price = $6, image = $7, description = $8, updated_at = $9 
WHERE id = $1
RETURNING id, name, model, color, year, price, image, description, created_at, updated_at
`

type UpdateCarParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Model       string    `json:"model"`
	Color       string    `json:"color"`
	Year        string    `json:"year"`
	Price       string    `json:"price"`
	Image       string    `json:"image"`
	Description string    `json:"description"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateCar(ctx context.Context, arg UpdateCarParams) (Car, error) {
	row := q.db.QueryRow(ctx, updateCar,
		arg.ID,
		arg.Name,
		arg.Model,
		arg.Color,
		arg.Year,
		arg.Price,
		arg.Image,
		arg.Description,
		arg.UpdatedAt,
	)
	var i Car
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Model,
		&i.Color,
		&i.Year,
		&i.Price,
		&i.Image,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
